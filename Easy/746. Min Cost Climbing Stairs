746. Min Cost Climbing Stairs

On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).

Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.

Example 1:
Input: cost = [10, 15, 20]
Output: 15
Explanation: Cheapest is start on cost[1], pay that cost and go to the top.

---------------------------------------------------------------------------------------------------------------------------
Greedy

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        if(cost.length == 2)
            return Math.min(cost[0], cost[1]);
        for(int i = 2; i < cost.length; i++){
            cost[i] += Math.min(cost[i-1], cost[i-2]);
        }
        return Math.min(cost[cost.length - 1], cost[cost.length - 2]);
    }
}

--------------------------------------------------------------------------------------------------------------------------
DP

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int step1 = 0;
        int step2 = 0;
        for(int i=cost.length-1; i >=0; i--){
            int curr_step = cost[i] + Math.min(step1, step2);
            step2 = step1;
            step1 = curr_step;
        }
        
        return Math.min(step1, step2);
    }
}