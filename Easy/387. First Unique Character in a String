387. First Unique Character in a String

Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

--------------------------------------------------------------------------------------------------

class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> count = new HashMap<Character, Integer>();
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            count.put(c, count.getOrDefault(c, 0) + 1);
        }

        for (int i = 0; i < n; i++) {
            if (count.get(s.charAt(i)) == 1) 
                return i;
        }
        return -1;
    }
}

--------------------------------------------------------------------------------------------------------------
Variation 2 - Long String, lowercase only
Use int array for a-z where
-1 = default/not occured
i = unique and first occurance
-2 = duplicate

class Solution {
    public  int firstUniqChar(String s) {
        int[] charset = new int[26];
        Arrays.fill(charset,-1);

        for(int i = 0; i < s.length(); i++){
            if(charset[(int) (s.charAt(i)-'a')] == -1)
                charset[(int) (s.charAt(i)-'a')] = i;
            else
                charset[(int) (s.charAt(i)-'a')] = -2;
        }
        int min = s.length()+1;
        for(int i = 0; i < charset.length; i++){
            if(charset[i] < 0)
                continue;
            else if(charset[i] < min)
                min = charset[i];
        }
        return min < s.length() ? min : -1;
    }
}
