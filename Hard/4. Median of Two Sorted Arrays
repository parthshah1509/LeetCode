4. Median of Two Sorted Arrays

There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

--------------------------------------------------------------------------------------------------------------------------------------------

//Naive Brute Force

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] all = new int[nums1.length + nums2.length];
        if(nums1.length > 0)
            System.arraycopy(nums1,0,all,0,nums1.length);
        if(nums2.length > 0)
            System.arraycopy(nums2,0,all,nums1.length,nums2.length);
        System.out.println(Arrays.toString(all));
        Arrays.sort(all);
        int length = all.length;
        if(length % 2 == 1){
            return (double) all[length/2];
        }
        if(length <= 2){
            return (double) IntStream.of(all).sum() / length;
        }
        System.out.println(all[length/2] +" + "+ all[(length/2) + 1]);
        return (double) (all[length/2] + all[(length/2) - 1]) / 2;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------

//BinarySearch in two arrays

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length)
            return findMedianSortedArrays(nums2,nums1);
        
        int x = nums1.length;
        int y = nums2.length;
        
        int low = 0;
        int high = x;
        while (low <= high) {
            int partitionX = (low + high)/2;
            int partitionY = (x + y + 1)/2 - partitionX;

            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];

            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];

            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                if ((x + y) % 2 == 0) {
                    return ((double)Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY))/2;
                } else {
                    return (double)Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY) {
                high = partitionX - 1;
            } else {
                low = partitionX + 1;
            }
        }

        throw new IllegalArgumentException();
    }
}