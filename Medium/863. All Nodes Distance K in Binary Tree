863. All Nodes Distance K in Binary Tree

We are given a binary tree (with root node root), a target node, and an integer value K.

Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.

------------------------------------------------------------------------------------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> res = new ArrayList();
        Queue<TreeNode> queue = new LinkedList();
        HashSet<TreeNode> set = new HashSet();
        
        if(K == 0)
            return new ArrayList<Integer>(Arrays.asList(target.val));
        
        Map<TreeNode, TreeNode> map = new HashMap<>();
        buildHashMap(root,null, map);
        
        int currentLevel = 0;
        queue.add(target);
        set.add(target);
        
        while(!queue.isEmpty()){
            if(currentLevel == K)
                return extractLayerFromQueue(queue);
            int size = queue.size();
            for(int i = 0; i<size; i++){
                TreeNode current = queue.remove();
                
                TreeNode parent = map.get(current);
                if(parent != null && !set.contains(parent)){
                    queue.offer(map.get(current));
                    set.add(map.get(current));
                }
                if(current.left != null && !set.contains(current.left)){
                    queue.offer(current.left);
                    set.add(current.left);
                }
                if(current.right != null && !set.contains(current.right)){
                    queue.offer(current.right);
                    set.add(current.right);
                }
            }
            currentLevel++;
        }
        return res;
    }
    
    public void buildHashMap(TreeNode node,TreeNode parent, Map<TreeNode, TreeNode> map) {
        if(node == null)
            return;
        map.put(node,parent);
        
        if(node.left != null)
            buildHashMap(node.left,node,map);
        if(node.right != null)
            buildHashMap(node.right,node,map);
    }
    
    private List<Integer> extractLayerFromQueue(Queue<TreeNode> queue) {
      List<Integer> extractedList = new ArrayList();
      for (TreeNode node: queue) {
        extractedList.add(node.val);
      }
      return extractedList;
    }
}