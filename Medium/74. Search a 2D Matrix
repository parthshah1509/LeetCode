74. Search a 2D Matrix

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true

----------------------------------------------------------------------------------------------------------------------------

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0)
            return false;
        
        int C = matrix[0].length;
        int R = matrix.length;
        int start = 0;
        int end = R*C - 1;
        // System.out.println(end);
        while(start <= end){
            int mid = start + (end-start) / 2;
            int midRow = mid/C;
            int midCol = mid%C;
            // System.out.println(midCol +" "+ midRow);
            if(matrix[midRow][midCol] < target)
                start = mid + 1;
            else if(matrix[midRow][midCol] > target)
                end = mid - 1;
            else
                return true;
        }
        return false;
    }
}